# $Id: cservice.example.conf.in,v 1.9 2005/12/06 18:12:44 kewlio Exp $
# Channel Services configuration file.
#
# sql_host = Hostname/IP of the PostgreSQL server.

sql_host = 127.0.0.1
sql_port = 5432

# sql_db = Name of the database. 
# (To create from the template, run cservice.sql through Postgres)

sql_db = cservice

# sql_user is the username to pass to Postgres on connection.
# Usefull if your account name is not the same as your Database
# username.

sql_user = dan
sql_pass = foo

# General 'Bot' options.

nickname = X
username = cservice
hostname = undernet.org
userdescription = For help type: /msg X help
mode = +idk

#
# Channel to relay flood/warnings/exceptions, etc.
#

pending_page_url = http://www.yoursite.com/live/view_app.php

relay_channel = #coder-com

#
# Channel to relay useful information, but not quite as annoying
# as the debug_channel ! (a.k.a privileged user relay channel)
# 

priv_relay_channel = #coder-com

#
# Channel to relay useful debug information that otherwise
# annoy CS admins. :)
#

debug_channel = #coder-com

#
# Coder channel.
#
# Channel used to extract levels to display coder access status.

coder_channel = #coder-com

#
# Frequency in seconds to check the database for updates.
#

update_interval = 180

#
# Number of seconds to sample for flooding.
#

flood_duration = 30

#
# Input flood rate.
#
# Eg: 30, for 30 points amassed within "flood_duration" seconds.
#

input_flood = 30

#
# Output flood rate.
#
# Eg: 20480 (20k within "flood_duration" seconds).
#

output_flood = 20480

#
# Minimum duration at which to set a topic in a non idle channel.
# (Seconds).
#

topic_duration = 1800

#
# Duration at which we check for idle user accounts in memory.
# (Seconds).

expire_interval = 3600

#
# How long those accounts should have been idle before they are
# uncached. (Seconds).
#

cache_interval = 3600

#
# How often to notify/commit changes to Pending channels.
# (Seconds).

pending_duration = 1800

#
# How often to check if the connection to the backend has
# fallen over? (Seconds).
#

connection_check_frequency = 10

#
# How many times do we try every 'connection_check_frequency' seconds
# to reconnect before finally giving up and exiting?
#

connection_retry_total = 5

#
# How often (in seconds) should we check all channels that have
# floating-limit set to see if they need a new limit setting?
#
# Note: 30 is a good value, try 1min if you have lots of chans
# and not so much CPU.

limit_check = 30

#
# How long (In seconds) should we wait before allowing
# logins after startup. (Incase you're on a busy network
# with a really large burst and need things to settle down
# first to ease up load on the Db).
#

login_delay = 360


#
# What is the period (in seconds) in which we will check to
# see if someone has sent too many notes, and what do we
# define "Too Many" as?
# Ie: You can send 'note_limit' notes in 'note_duration' seconds.
#

note_duration = 3600
note_limit = 5

#
# Pre-cache 'x' days worth of user accounts.
# This lets you preload all the users who have logged in during the last
# 'x' number of days to avoid a large number of queries when processing
# +r accounts during the initial net.burst.
#
preload_user_days = 1

#
# Specify the filename for the 'Admin Log'.
# Basically a log of all commands admins type.
#
admin_logfile = admin.log

#
# Specify the filename for the 'Command Log'
# A log of ALL commands issued by ALL users.
# requires USE_COMMAND_LOG in cservice_config.h
command_logfile = cs.log

#
# This option is used only if ALLOW_HELLO is defined in
# cservice_config.h, thus enabling the HELLO command in cservice.
# This is the time to block users attempting to flood the bot with
# hello commands, in seconds.
#
hello_block_period = 3600

#
# What is the period (in seconds) in which we will check for
# new webrelay messages
#

webrelay_interval = 10;

