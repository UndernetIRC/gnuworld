#include	<string>
#include	<cstdlib>
#include        <iomanip>
#include	"ccontrol.h"
#include	"CControlCommands.h"
#include	"StringTokenizer.h"
#include	"md5hash.h" 
#include        "ccUser.h"
const char LOGINCommand_cc_rcsId[] = "$Id: LOGINCommand.cc,v 1.4 2001/02/24 18:31:27 mrbean_ Exp $";

namespace gnuworld
{

using std::string ;


bool LOGINCommand::Exec( iClient* theClient, const string& Message)
{
StringTokenizer st( Message ) ;
if( st.size() < 3 )
	{
	Usage(theClient);
	return true;
	}

AuthInfo* tmpUser = bot->IsAuth(theClient->getCharYYXXX());
if (tmpUser) 
	{
	bot->Notice(theClient, "You  are already authenticated! ");
	return false;
	}

	/*
	 *  Find the user record, confirm authorisation and attach the record to this client. 
	 */
 
ccUser* theUser = bot->GetOper(st[1]);
if (theUser) 
	{ 
		/*
		 *  Compare password with MD5 hash stored in user record.
		 */

/*	if(!bot->UserGotMask(theUser,theClient->getNickUserHost()))
		{
		bot->Notice(theClient,"Sorry but your mask doesnt appear in my access list!");
		return false;
		}*/

	md5	hash; // MD5 hash algorithm object.
	md5Digest digest; // MD5Digest algorithm object.
	strstream output;
	string salt = theUser->getPassword().substr(0, 8);
	string md5Part = theUser->getPassword().substr(8);
	string guess = salt + st.assemble(2);

	// Build a MD5 hash based on our salt + the guessed password.
	hash.update( (unsigned char *)guess.c_str(), strlen( guess.c_str() ));
	hash.report( digest );

	// Convert the digest into an array of int's to output as hex for 
	// comparison with the passwords generated by PHP.
	int data[ MD5_DIGEST_LENGTH ];
	int ii;
	for( ii = 0; ii < MD5_DIGEST_LENGTH; ii++ )
		{
		data[ii] = digest[ii];
		}
	output << hex;
	output.fill('0');
	for( ii = 0; ii < MD5_DIGEST_LENGTH; ii++ ) {
		output << setw(2) << data[ii];
		}
	output << ends;

	if (md5Part != output.str()) // If the MD5 hash's don't match..
		{
		bot->Notice(theClient, "AUTHENTICATION FAILED as %s (Invalid Password).", theUser->getUserName().c_str());
		return false;
		}

	theUser->setUserName(st[1]);
	theUser->setNumeric(theClient->getCharYYXXX());
	if(bot->AuthOper(theUser))
	if(!(theUser->getFlags() & isSUSPENDED))
		bot->Notice(theClient, "Authentication successful! ",theUser->getUserName().c_str()); 
	else 
		bot->Notice(theClient, "Authentication successful,However you are suspended ",theUser->getUserName().c_str()); 
	else
	        bot->Notice(theClient, "Error in authentication ",theUser->getUserName().c_str()); 
	delete (theUser);
	} 
else
	{
	bot->Notice(theClient, "Sorry, I don't know who %s is.", st[1].c_str());
	return false;
	}

return true; 
} 
}